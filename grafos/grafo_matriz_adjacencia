##### experimentando ######

vertices = ["A", "B", "C"]
N = len(vertices)
arestas = [("A","B"), ("A","C"), ("C","A"), ("C", "B")]

grafo = [[None for _ in range(N)] for _ in range(N)]  # matriz de adjacencia
print(grafo)

for aresta in arestas:
    vertice1 = aresta[0]
    vertice2 = aresta[1]
    linha = vertices.index(vertice1)
    coluna = vertices.index(vertice2)

    grafo[linha][coluna] = 1


print(grafo)

########## criando uma classe #############

class GrafoMatrizAdjacencia:

    def __init__(self, vertices, arestas):
        self.vertices = vertices
        self.arestas = arestas
        self.matriz = [
                        [None for _ in range(len(self.vertices))] 
                            for _ in range(len(self.vertices))
                      ]

        for aresta in arestas:
            vertice1 = aresta[0]
            vertice2 = aresta[1]
            peso = aresta[2]
            linha = vertices.index(vertice1)
            coluna = vertices.index(vertice2)

            self.matriz[linha][coluna] = peso
            self.matriz[coluna][linha] = peso

    def get_vizinhanca(self, vertice):
        if vertice in self.vertices:
            index_vertice = self.vertices.index(vertice)
            for i in range(len(self.matriz)):
                yield (self.vertices[i], self.matriz[index_vertice][i]) 

    def existe_aresta(self, vertice1, vertice2):
        return self.matriz[vertice1][vertice2]

    def __str__(self):
        string = "\t"
        for vertice in vertices:
            string += vertice + "\t"
        string += "\n"
        i = 0
        for linha in self.matriz:
            string += self.vertices[i] + "\t"
            i += 1
            for coluna in linha:
                string += str(coluna) + "\t"
            string += "\n"
        return string
        


grafo2 = GrafoMatrizAdjacencia(vertices, arestas)
print(grafo2)
